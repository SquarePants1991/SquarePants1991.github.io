---
layout: post
title: 基本纹理
date: 2017-07-03 19:41:51 +0800
categories: 学习OpenGLES系列文章
---

### [获取示例代码](https://github.com/SquarePants1991/OpenGLESLearn)，本文代码在分支chapter10中。
***

纹理通常来说就是一张图片，我们为每一个顶点指定纹理坐标，然后就可以在Shader中获取相应的纹理像素点颜色了。
### 纹理坐标
首先解释一下什么是纹理坐标。把一张图的左上角定为0，0点，长宽都定义为1，剩余四个点的坐标就会如下图所示。这样就构成了纹理坐标系统。

![](http://upload-images.jianshu.io/upload_images/2949750-d3909a00f05e1ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
一般使用`uv`来表示纹理坐标，`uv`是一个二维向量`(u,v)`，u和v的取值从0到1。我在代码中为每个顶点数据增加了2个`GLFloat`来表示`uv`的值。下面是X轴上平面的的代码。
```
- (void)drawXPlanes {
    static GLfloat triangleData[] = {
// X轴0.5处的平面
      0.5,  -0.5,    0.5f, 1,  0,  0, 0, 0,
      0.5,  -0.5f,  -0.5f, 1,  0,  0, 0, 1,
      0.5,  0.5f,   -0.5f, 1,  0,  0, 1, 1,
      0.5,  0.5,    -0.5f, 1,  0,  0, 1, 1,
      0.5,  0.5f,    0.5f, 1,  0,  0, 1, 0,
      0.5,  -0.5f,   0.5f, 1,  0,  0, 0, 0,
// X轴-0.5处的平面
      -0.5,  -0.5,    0.5f, -1,  0,  0, 0, 0,
      -0.5,  -0.5f,  -0.5f, -1,  0,  0, 0, 1,
      -0.5,  0.5f,   -0.5f, -1,  0,  0, 1, 1,
      -0.5,  0.5,    -0.5f, -1,  0,  0, 1, 1,
      -0.5,  0.5f,    0.5f, -1,  0,  0, 1, 0,
      -0.5,  -0.5f,   0.5f, -1,  0,  0, 0, 0,
    };
    [self bindAttribs:triangleData];
    glDrawArrays(GL_TRIANGLES, 0, 12);
}
```
我们分析一下X轴0.5处的平面的顶点数据。
```
      0.5,  -0.5,    0.5, 1,  0,  0, 0, 0,
      0.5,  -0.5,  -0.5, 1,  0,  0, 0, 1,
      0.5,  0.5,   -0.5, 1,  0,  0, 1, 1,
      0.5,  0.5,    -0.5, 1,  0,  0, 1, 1,
      0.5,  0.5,    0.5, 1,  0,  0, 1, 0,
      0.5,  -0.5,   0.5, 1,  0,  0, 0, 0,
```
第一个三角形uv和顶点对应关系如下。
` 0.5, -0.5, 0.5`点对应的`uv`是`0, 0`，
` 0.5, -0.5, -0.5`点对应的`uv`是`0, 1`，
` 0.5, 0.5, -0.5`点对应的`uv`是`1, 1`。

![](http://upload-images.jianshu.io/upload_images/2949750-934528bb1121112d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

第二个三角形uv和顶点对应关系如下。
` 0.5,  0.5, -0.5`点对应的`uv`是`1, 1`，
` 0.5, 0.5, 0.5`点对应的`uv`是`1, 0`，
` 0.5, -0.5, 0.5`点对应的`uv`是`0, 0`。

![](http://upload-images.jianshu.io/upload_images/2949750-95a4a48ef209f9f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

这两个三角形的`uv`分别对应纹理的两个三角部分，合在一起刚好是完整的纹理。
> 在3D建模中，这种顶点和`uv`的映射关系是要通过建模工具去完成的，只有为每个顶点配置了合适的`uv`，才能让贴图按照你想要的方式显示出来。

然后增加绑定uv属性的代码。
```
- (void)bindAttribs:(GLfloat *)triangleData {
    // 启用Shader中的两个属性
    // attribute vec4 position;
    // attribute vec4 color;
    GLuint positionAttribLocation = glGetAttribLocation(self.shaderProgram, "position");
    glEnableVertexAttribArray(positionAttribLocation);
    GLuint colorAttribLocation = glGetAttribLocation(self.shaderProgram, "normal");
    glEnableVertexAttribArray(colorAttribLocation);
    GLuint uvAttribLocation = glGetAttribLocation(self.shaderProgram, "uv");
    glEnableVertexAttribArray(uvAttribLocation);
    
    // 为shader中的position和color赋值
    // glVertexAttribPointer (GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr)
    // indx: 上面Get到的Location
    // size: 有几个类型为type的数据，比如位置有x,y,z三个GLfloat元素，值就为3
    // type: 一般就是数组里元素数据的类型
    // normalized: 暂时用不上
    // stride: 每一个点包含几个byte，本例中就是6个GLfloat，x,y,z,r,g,b
    // ptr: 数据开始的指针，位置就是从头开始，颜色则跳过3个GLFloat的大小
    glVertexAttribPointer(positionAttribLocation, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (char *)triangleData);
    glVertexAttribPointer(colorAttribLocation, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (char *)triangleData + 3 * sizeof(GLfloat));
    glVertexAttribPointer(uvAttribLocation, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (char *)triangleData + 6 * sizeof(GLfloat));
}
```
将顶点数据最后两个`GLFloat`绑定到Shader的uv属性上。

### 生成纹理
我们有了坐标，那么纹理数据怎么获取呢？GLKit提供了非常便捷的方式为我们生成纹理。
```
- (void)genTexture {
    NSString *textureFile = [[NSBundle mainBundle] pathForResource:@"texture" ofType:@"jpg"];
    NSError *error;
    self.diffuseTexture = [GLKTextureLoader textureWithContentsOfFile:textureFile options:nil error:&error];
}
```
diffuseTexture是GLKTextureInfo类型的，它的属性`name`将会被用来和OpenGL系统进行交互。
```
@property (strong, nonatomic) GLKTextureInfo *diffuseTexture;
```

### 绑定和使用纹理
有了纹理，接下来就要把它传递给Shader，前面我们已经把每个顶点的纹理坐标传递给了Vertex Shader。在Vertex Shader中新增了属性`attribute vec2 uv;`，以及`varying vec2 fragUV;`。Vertex Shader做的事情就是把`uv`直接传递给Fragment Shader，让它去处理。
```
attribute vec4 position;
attribute vec3 normal;
attribute vec2 uv;

uniform float elapsedTime;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;
uniform mat4 modelMatrix;

varying vec3 fragNormal;
varying vec2 fragUV;

void main(void) {
    mat4 mvp = projectionMatrix * cameraMatrix * modelMatrix;
    fragNormal = normal;
    fragUV = uv;
    gl_Position = mvp * position;
}
```
Fragment Shader中增加了`uniform sampler2D diffuseMap;`，`sampler2D`是纹理的参数类型。然后将`diffuseMap`在纹理坐标`fragUV`上的像素颜色作为基本色`vec4 materialColor = texture2D(diffuseMap, fragUV);`。`texture2D`函数用来采样纹理在某个`uv`坐标下的颜色，返回值类型是`vec4`。
```
precision highp float;

varying vec3 fragNormal;
varying vec2 fragUV;

uniform float elapsedTime;
uniform vec3 lightDirection;
uniform mat4 normalMatrix;
uniform sampler2D diffuseMap;

void main(void) {
    vec3 normalizedLightDirection = normalize(-lightDirection);
    vec3 transformedNormal = normalize((normalMatrix * vec4(fragNormal, 1.0)).xyz);
    
    float diffuseStrength = dot(normalizedLightDirection, transformedNormal);
    diffuseStrength = clamp(diffuseStrength, 0.0, 1.0);
    vec3 diffuse = vec3(diffuseStrength);
    
    vec3 ambient = vec3(0.3);
    
    vec4 finalLightStrength = vec4(ambient + diffuse, 1.0);

    vec4 materialColor = texture2D(diffuseMap, fragUV);
    
    gl_FragColor = finalLightStrength * materialColor;
}
```
回到OC代码。将我们生成的纹理绑定到`uniform` `diffuseMap`上。
```
  // 绑定纹理
    GLuint diffuseMapUniformLocation = glGetUniformLocation(self.shaderProgram, "diffuseMap");
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, self.diffuseTexture.name);
    glUniform1i(diffuseMapUniformLocation, 0);
```
绑定纹理的流程是：
1. 激活纹理的某个通道`glActiveTexture(GL_TEXTURE0);`,OpenGL ES中最多可以激活8个通道。通道0是默认激活的，所以本例中这一句也可以不写。
1. 绑定生成的纹理到`GL_TEXTURE_2D`， `glBindTexture(GL_TEXTURE_2D, self.diffuseTexture.name);`，注意这里是绑定到`GL_TEXTURE_2D`而不是`GL_TEXTURE0`。
1. 将0传递给`uniform` `diffuseMap`,如果激活的是`GL_TEXTURE1`就传递1，以此类推。

到此，纹理的基本使用方法就介绍完了，效果如下。

![](http://upload-images.jianshu.io/upload_images/2949750-67674e73775b82e5.gif?imageMogr2/auto-orient/strip)

### 补充：使用OpenGL函数生成纹理
除了使用GLKit生成纹理之外，还可以直接使用OpenGL生成纹理。
1. 首先将图片的数据以RGBA的形式导出。
1. 使用`glGenTextures`生成纹理，这里生成的纹理就相当于上面说到的`self.diffuseTexture.name`。
1. 使用`glBindTexture`绑定纹理到`GL_TEXTURE_2D`。
1. 使用`glTexImage2D`写图片数据，我们的图片数据已经统一导出成RGBA格式了，所以颜色格式参数使用`GL_RGBA`。每个颜色组件参数使用`GL_UNSIGNED_BYTE`，就是说R，G，B，A每个数据各占一个字节的大小。
1. 使用`glTexParameteri`设置采样方式和重复方式，每个方式具体的效果大家可以自行修改例子观察一下。重复方式主要用于`uv`超出0到1的场景。
1. `glBindTexture(GL_TEXTURE_2D, 0);`是为了清空`GL_TEXTURE_2D`绑定的数据，可以把`GL_TEXTURE_2D`理解为一个工作台，你处理完了你的事情需要把工作台清理干净。

```
- (void)genTextureWithGLCommands {
    UIImage *img = [UIImage imageNamed:@"texture.jpg"];
    // 将图片数据以RGBA的格式导出到textureData中
    CGImageRef imageRef = [img CGImage];
    size_t width = CGImageGetWidth(imageRef);
    size_t height = CGImageGetHeight(imageRef);
    
    GLubyte *textureData = (GLubyte *)malloc(width * height * 4);
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * width;
    NSUInteger bitsPerComponent = 8;
    
    CGContextRef context = CGBitmapContextCreate(textureData, width, height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);
    CGContextRelease(context);
    
    // 生成纹理
    GLuint texture;
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, (GLsizei)width, (GLsizei)height, 0, GL_RGBA, GL_UNSIGNED_BYTE, textureData);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glBindTexture(GL_TEXTURE_2D, 0);
    
    self.diffuseTextureWithGLCommands = texture;
}
```
> 注意，作为纹理的图片的尺寸最好是2的n次方，比如1024，512。一方面提高性能，另一方面不是所有的3D图形处理系统都支持非2的n次方尺寸的纹理。
